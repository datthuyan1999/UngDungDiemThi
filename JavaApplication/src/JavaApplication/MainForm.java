package JavaApplication;

import KetNoi.ThiSinhSQL;
import KetNoi.TinhThanhSQL;
import ThongTin.ThiSinh;
import ThongTin.TinhThanh;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Van Nam
 */
public class MainForm extends javax.swing.JFrame {

    private ArrayList<ThiSinh> listStudent = new ThiSinhSQL().getListThiSinh();
    private ArrayList<TinhThanh> listCity = new TinhThanhSQL().getListTinhThanh();
    private DefaultTableModel tableModel;
    private DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
    private SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
    private int MaTS;

    /**
     * Creates new form ThietKeGiaoDien
     */
    public MainForm() {
        initComponents();
        setLocationRelativeTo(null);    //giao diện hiện giữa màn hình

        //cài đặt các cột cho table
        String[] colName = {"ID", "Name", "Place", "Date", "Sex", "Math", "Physical",
            "Chemistry"};
        tableModel = (DefaultTableModel) jTableList_Student.getModel();
        tableModel.setColumnIdentifiers(colName);

        //thêm các hàng vào table và hiện ra
        for (int i = 0; i < listStudent.size(); i++) {
            showResult(i, listStudent.get(i));
        }
        //cài đặt mã thí sinh
        setIDStudent();
        jTextFieldID.setText(MaTS + "");

        //cài đặt tỉnh thành
        setListCity();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        jLabelStudent_Filtre = new javax.swing.JLabel();
        jLabelBirthPlace = new javax.swing.JLabel();
        jTextFieldBirthPlace = new javax.swing.JTextField();
        jLabelStudentID = new javax.swing.JLabel();
        jTextFieldStudentID = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jLabelList_Student = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableList_Student = new javax.swing.JTable();
        jLabelStudent_Information = new javax.swing.JLabel();
        jLabelID = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelPlace = new javax.swing.JLabel();
        jLabelDate = new javax.swing.JLabel();
        jLabelSex = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jTextFieldName = new javax.swing.JTextField();
        jLabelMath = new javax.swing.JLabel();
        jLabelPhysical = new javax.swing.JLabel();
        jLabelChemistry = new javax.swing.JLabel();
        jLabelTotal = new javax.swing.JLabel();
        jTextFieldMath = new javax.swing.JTextField();
        jTextFieldPhysical = new javax.swing.JTextField();
        jTextFieldChemistry = new javax.swing.JTextField();
        jTextFieldTotal = new javax.swing.JTextField();
        jButtonInsert = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jRadioButtonMale = new javax.swing.JRadioButton();
        jRadioButtonFemale = new javax.swing.JRadioButton();
        jButtonAbout = new javax.swing.JButton();
        jButtonFileCity = new javax.swing.JButton();
        jComboBoxPlace = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jLabelPoint = new javax.swing.JLabel();
        jTextFieldPoint = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jLabelNameOfStudent = new javax.swing.JLabel();
        jTextFieldNameOfStudent = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project: Student");
        setName("Project: Student"); // NOI18N

        jLabelStudent_Filtre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelStudent_Filtre.setText("Student Filtre");

        jLabelBirthPlace.setBackground(new java.awt.Color(0, 0, 0));
        jLabelBirthPlace.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelBirthPlace.setText("BirthPlace");

        jTextFieldBirthPlace.setToolTipText("Nhập tên tỉnh thành");

        jLabelStudentID.setBackground(new java.awt.Color(0, 0, 0));
        jLabelStudentID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelStudentID.setText("StudentID");

        jTextFieldStudentID.setToolTipText("Nhập mã thí sinh");

        jButtonSearch.setBackground(new java.awt.Color(102, 255, 255));
        jButtonSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelList_Student.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelList_Student.setText("List Student");

        jTableList_Student.setAutoCreateRowSorter(true);
        jTableList_Student.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ){
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        }
    );
    jTableList_Student.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jTableList_Student.setDoubleBuffered(true);
    jTableList_Student.setDragEnabled(true);
    jTableList_Student.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jTableList_Student.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTableList_StudentMouseClicked(evt);
        }
        public void mousePressed(java.awt.event.MouseEvent evt) {
            jTableList_StudentMousePressed(evt);
        }
    });
    jScrollPane1.setViewportView(jTableList_Student);

    jLabelStudent_Information.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelStudent_Information.setText("Student Information");

    jLabelID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelID.setText("ID");

    jLabelName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelName.setText("Name");

    jLabelPlace.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelPlace.setText("BirthPlace");

    jLabelDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelDate.setText("Date");

    jLabelSex.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelSex.setText("Sex");

    jTextFieldID.setEditable(false);
    jTextFieldID.setToolTipText("Mã thí sinh");

    jTextFieldName.setToolTipText("Nhập tên thí sinh");

    jLabelMath.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelMath.setText("Math");

    jLabelPhysical.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelPhysical.setText("Physical");

    jLabelChemistry.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelChemistry.setText("Chemistry");

    jLabelTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelTotal.setText("Total");

    jTextFieldMath.setToolTipText("Điểm toán");

    jTextFieldPhysical.setToolTipText("Điểm lý");

    jTextFieldChemistry.setToolTipText("Điểm hóa");

    jTextFieldTotal.setEditable(false);
    jTextFieldTotal.setToolTipText("Tổng điểm");

    jButtonInsert.setBackground(new java.awt.Color(102, 255, 102));
    jButtonInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonInsert.setText("Insert");
    jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonInsertActionPerformed(evt);
        }
    });

    jButtonDelete.setBackground(new java.awt.Color(255, 51, 51));
    jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonDelete.setText("Delete");
    jButtonDelete.setToolTipText("");
    jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonDeleteActionPerformed(evt);
        }
    });

    jButtonEdit.setBackground(new java.awt.Color(255, 255, 102));
    jButtonEdit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonEdit.setText("Edit");
    jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonEditActionPerformed(evt);
        }
    });

    jButtonCancel.setBackground(new java.awt.Color(51, 51, 255));
    jButtonCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonCancel.setText("Cancel");
    jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonCancelActionPerformed(evt);
        }
    });

    jButtonRefresh.setBackground(new java.awt.Color(255, 153, 51));
    jButtonRefresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonRefresh.setText("Refresh");
    jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonRefreshActionPerformed(evt);
        }
    });

    buttonGroup.add(jRadioButtonMale);
    jRadioButtonMale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jRadioButtonMale.setText("M");
    jRadioButtonMale.setToolTipText("Nam");

    buttonGroup.add(jRadioButtonFemale);
    jRadioButtonFemale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jRadioButtonFemale.setText("F");
    jRadioButtonFemale.setToolTipText("Nữ");

    jButtonAbout.setBackground(new java.awt.Color(153, 255, 153));
    jButtonAbout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jButtonAbout.setText("About");
    jButtonAbout.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jButtonAboutMouseClicked(evt);
        }
    });

    jButtonFileCity.setBackground(new java.awt.Color(153, 255, 153));

    jButtonFileCity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

    jButtonFileCity.setText("File City");
    jButtonFileCity.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonFileCityActionPerformed(evt);
        }
    });

    jComboBoxPlace.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jComboBoxPlaceMouseClicked(evt);
        }
    });

    jDateChooser.setDateFormatString("dd/MM/yyyy");

    jLabelPoint.setBackground(new java.awt.Color(0, 0, 0));
    jLabelPoint.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelPoint.setText("Benchmark");

    jTextFieldPoint.setToolTipText("Nhập điểm chuẩn");

    jLabelNameOfStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jLabelNameOfStudent.setText("NameOfStudent");

    jTextFieldNameOfStudent.setToolTipText("Nhập tên thí sinh");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jSeparator1)
        .addComponent(jSeparator2)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabelStudent_Information)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator3))
        .addGroup(layout.createSequentialGroup()
            .addGap(36, 36, 36)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelID)
                    .addComponent(jLabelName)
                    .addComponent(jLabelPlace)
                    .addComponent(jLabelDate)
                    .addComponent(jLabelSex))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButtonInsert)
                    .addGap(44, 44, 44)))
            .addGap(29, 29, 29)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRadioButtonMale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButtonFemale))
                    .addComponent(jTextFieldName)
                    .addComponent(jComboBoxPlace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabelMath)
                .addComponent(jLabelPhysical)
                .addComponent(jLabelChemistry)
                .addComponent(jLabelTotal))
            .addGap(35, 35, 35)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jTextFieldMath)
                .addComponent(jTextFieldPhysical)
                .addComponent(jTextFieldChemistry)
                .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(79, 79, 79))
        .addComponent(jSeparator4)
        .addComponent(jSeparator5)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jScrollPane1)
                    .addContainerGap())
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelStudent_Filtre)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator6))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(184, 184, 184)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(79, 79, 79)
                    .addComponent(jButtonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(73, 73, 73)
                    .addComponent(jButtonCancel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRefresh)
                    .addGap(40, 40, 40))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButtonFileCity)
                    .addGap(18, 18, 18)
                    .addComponent(jButtonAbout)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelList_Student)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jSeparator7))))
        .addGroup(layout.createSequentialGroup()
            .addGap(46, 46, 46)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelNameOfStudent)
                    .addGap(27, 27, 27)
                    .addComponent(jTextFieldNameOfStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelStudentID)
                    .addGap(66, 66, 66)
                    .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(66, 66, 66)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelBirthPlace)
                    .addGap(29, 29, 29)
                    .addComponent(jTextFieldBirthPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabelPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextFieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(44, 44, 44)
            .addComponent(jButtonSearch)
            .addContainerGap(43, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButtonAbout)
                .addComponent(jButtonFileCity))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabelStudent_Filtre)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabelStudentID)
                                        .addComponent(jTextFieldStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelBirthPlace)
                                        .addComponent(jTextFieldBirthPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(2, 2, 2)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextFieldNameOfStudent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNameOfStudent)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addComponent(jButtonSearch)
                            .addGap(0, 0, Short.MAX_VALUE))))
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelPoint))))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabelList_Student))
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(8, 8, 8)
            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabelStudent_Information, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelID, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextFieldID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(jLabelName))
                        .addComponent(jTextFieldName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelPlace)
                        .addComponent(jComboBoxPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelDate)
                        .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jLabelSex))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonMale)
                    .addComponent(jRadioButtonFemale))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabelMath)
                                        .addComponent(jTextFieldMath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(35, 35, 35))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelPhysical)
                                    .addComponent(jTextFieldPhysical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(38, 38, 38))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelChemistry)
                            .addComponent(jTextFieldChemistry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(21, 21, 21)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelTotal)
                        .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(2, 2, 2)
            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jButtonDelete)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsert)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonRefresh)))
            .addContainerGap(15, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        boolean checkStudent = false;        //kiểm tra mã thí sinh có trong danh sách không
        boolean checkCity = false;           //kiểm tra mã tỉnh có trong danh sách không
        boolean checkTotal = false;         //kiểm tra có thí sinh nào có tổng điểm >= điểm chuẩn
        boolean checkNameOfStudent = false; //kiểm tra tên thí sinh có trong list không
        ArrayList<ThiSinh> listst = new ArrayList<>();

        //bỏ khoảng trắng
        jTextFieldBirthPlace.setText(jTextFieldBirthPlace.getText().trim());
        jTextFieldBirthPlace.setText(jTextFieldBirthPlace.getText().replaceAll("\\s+", " "));
        jTextFieldStudentID.setText(jTextFieldStudentID.getText().trim());
        jTextFieldPoint.setText(jTextFieldPoint.getText().trim());
        jTextFieldNameOfStudent.setText(jTextFieldNameOfStudent.getText().trim());
        jTextFieldNameOfStudent.setText(jTextFieldNameOfStudent.getText().replaceAll("\\s+", " "));

        //lấy ra tỉnh thành theo tên
        String regex = ".*" + jTextFieldBirthPlace.getText() + ".*";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher;
        ArrayList<TinhThanh> list = new ArrayList<>();
        for (int i = 0; i < listCity.size(); i++) {
            if (listCity.get(i).getTenTinh().equalsIgnoreCase(jTextFieldBirthPlace.getText())) {
                list.add(listCity.get(i));
                break;
            }
        }
        if (list.size() == 0) {
            for (int i = 0; i < listCity.size(); i++) {
                matcher = pattern.matcher(listCity.get(i).getTenTinh());
                if (matcher.find()) {
                    list.add(listCity.get(i));
                }
            }
        }
        //lấy ra những thí sinh theo mã tỉnh
        for (int i = 0; i < list.size(); i++) {
            for (int j = 0; j < listStudent.size(); j++) {
                if (list.get(i).getMaTinh() == listStudent.get(j).getMaQueQuan()) {
                    listst.add(listStudent.get(j));
                }
            }
        }

        //lấy ra những thí sinh theo tên thí sinh
        String regex1 = ".*" + jTextFieldNameOfStudent.getText() + ".*";
        Pattern pattern1 = Pattern.compile(regex1);
        Matcher matcher1;
        ArrayList<ThiSinh> liststu = new ArrayList<>();
        for (int i = 0; i < listStudent.size(); i++) {
            if (listStudent.get(i).getTenThiSinh().equalsIgnoreCase(jTextFieldNameOfStudent.getText())) {
                liststu.add(listStudent.get(i));
            }
        }
        if (liststu.size() == 0) {
            for (int i = 0; i < listStudent.size(); i++) {
                matcher1 = pattern1.matcher(listStudent.get(i).getTenThiSinh());
                if (matcher1.find()) {
                    liststu.add(listStudent.get(i));
                }
            }
        }
        //chỉ tìm kiếm theo tên tỉnh
        if (jTextFieldStudentID.getText().length() == 0 && jTextFieldPoint.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            if (listst.size() != 0) {
                tableModel.setRowCount(0);
                checkCity = true;
                for (int i = 0; i < listst.size(); i++) {
                    showResult(tableModel.getRowCount(), listst.get(i));
                }
            }
        } //chỉ tìm kiếm theo mã thí sinh
        else if (jTextFieldBirthPlace.getText().length() == 0 && jTextFieldPoint.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            try {
                for (int i = 0; i < listStudent.size(); i++) {
                    if (Integer.parseInt(jTextFieldStudentID.getText()) == (listStudent.get(i).getMaThiSinh())) {
                        tableModel.setRowCount(0);
                        showResult(tableModel.getRowCount(), listStudent.get(i));
                        checkStudent = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
        } //chỉ lọc theo điểm chuẩn
        else if (jTextFieldBirthPlace.getText().length() == 0 && jTextFieldStudentID.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            try {
                tableModel.setRowCount(0);
                for (int i = 0; i < listStudent.size(); i++) {
                    float tong_diem = listStudent.get(i).getDiemToan() + listStudent.get(i).getDiemLy() + listStudent.get(i).getDiemHoa();
                    if (tong_diem >= Float.parseFloat(jTextFieldPoint.getText())) {
                        showResult(tableModel.getRowCount(), listStudent.get(i));
                        checkTotal = true;
                    }
                }
            } catch (Exception e) {
            }
        } //chỉ tìm kiếm theo tên thí sinh
        else if (jTextFieldStudentID.getText().length() == 0 && jTextFieldPoint.getText().length() == 0 && jTextFieldBirthPlace.getText().length() == 0) {
            if (liststu.size() != 0) {
                checkNameOfStudent = true;
                tableModel.setRowCount(0);
                for (int i = 0; i < liststu.size(); i++) {
                    showResult(tableModel.getRowCount(), liststu.get(i));
                }
            }
        } //lọc theo tên tỉnh và mã thí sinh
        else if (jTextFieldPoint.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            try {
                for (int i = 0; i < listst.size(); i++) {
                    if (Integer.parseInt(jTextFieldStudentID.getText()) == (listst.get(i).getMaThiSinh())) {
                        tableModel.setRowCount(0);
                        showResult(tableModel.getRowCount(), listStudent.get(i));
                        checkStudent = true;
                        checkCity = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
        } //lọc theo tên tỉnh và điểm chuẩn
        else if (jTextFieldStudentID.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            tableModel.setRowCount(0);
            try {
                for (int i = 0; i < listst.size(); i++) {
                    float tong_diem = listst.get(i).getDiemToan() + listst.get(i).getDiemLy() + listst.get(i).getDiemHoa();
                    if (tong_diem >= Float.parseFloat(jTextFieldPoint.getText())) {
                        showResult(tableModel.getRowCount(), listst.get(i));
                        checkTotal = true;
                        checkCity = true;
                    }
                }
            } catch (Exception e) {
            }
        } //lọc theo mã thí sinh và điểm chuẩn
        else if (jTextFieldBirthPlace.getText().length() == 0 && jTextFieldNameOfStudent.getText().length() == 0) {
            try {
                for (int i = 0; i < listStudent.size(); i++) {
                    float tong_diem = listStudent.get(i).getDiemToan() + listStudent.get(i).getDiemLy() + listStudent.get(i).getDiemHoa();
                    if (tong_diem >= Float.parseFloat(jTextFieldPoint.getText()) && Integer.parseInt(jTextFieldStudentID.getText()) == (listStudent.get(i).getMaThiSinh())) {
                        tableModel.setRowCount(0);
                        showResult(tableModel.getRowCount(), listStudent.get(i));
                        checkStudent = true;
                        checkTotal = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
        } //lọc theo mã thí sinh và tên thí sinh
        else if (jTextFieldBirthPlace.getText().length() == 0 && jTextFieldPoint.getText().length() == 0) {
            try {
                for (int i = 0; i < liststu.size(); i++) {
                    if (Integer.parseInt(jTextFieldStudentID.getText()) == (liststu.get(i).getMaThiSinh())) {
                        tableModel.setRowCount(0);
                        showResult(tableModel.getRowCount(), liststu.get(i));
                        checkStudent = true;
                        checkNameOfStudent = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo tên tỉnh và tên thí sinh
        else if (jTextFieldStudentID.getText().length() == 0 && jTextFieldPoint.getText().length() == 0) {
            tableModel.setRowCount(0);
            for (int i = 0; i < liststu.size(); i++) {
                for (int j = 0; j < listst.size(); j++) {
                    if (liststu.get(i).getMaThiSinh() == listst.get(j).getMaThiSinh()) {
                        showResult(tableModel.getRowCount(), liststu.get(i));
                        checkNameOfStudent = true;
                        checkCity = true;
                    }
                }
            }
        } //tìm kiếm theo điểm chuẩn và tên thí sinh
        else if (jTextFieldStudentID.getText().length() == 0 && jTextFieldBirthPlace.getText().length() == 0) {
            try {
                tableModel.setRowCount(0);
                for (int i = 0; i < liststu.size(); i++) {
                    float tong_diem = liststu.get(i).getDiemToan() + liststu.get(i).getDiemLy() + liststu.get(i).getDiemHoa();
                    if (tong_diem >= Float.parseFloat(jTextFieldPoint.getText())) {
                        showResult(tableModel.getRowCount(), liststu.get(i));
                        checkNameOfStudent = true;
                        checkTotal = true;
                    }
                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo tên tỉnh và mã thí sinh và điểm chuẩn
        else if (jTextFieldNameOfStudent.getText().length() == 0) {
            try {
                for (int i = 0; i < listStudent.size(); i++) {
                    float tong_diem = listStudent.get(i).getDiemToan() + listStudent.get(i).getDiemLy() + listStudent.get(i).getDiemHoa();
                    for (int j = 0; j < list.size(); j++) {
                        if (listStudent.get(i).getMaQueQuan() == list.get(j).getMaTinh() && tong_diem >= Float.parseFloat(jTextFieldPoint.getText())
                                && Integer.parseInt(jTextFieldStudentID.getText()) == (listStudent.get(i).getMaThiSinh())) {
                            tableModel.setRowCount(0);
                            showResult(tableModel.getRowCount(), listStudent.get(i));
                            checkStudent = true;
                            checkCity = true;
                            checkTotal = true;
                            break;
                        }
                    }
                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo mã thí sinh và điểm chuẩn và tên thí sinh
        else if (jTextFieldBirthPlace.getText().length() == 0) {
            try {
                for (int i = 0; i < liststu.size(); i++) {
                    float tong_diem = liststu.get(i).getDiemToan() + liststu.get(i).getDiemLy() + liststu.get(i).getDiemHoa();
                    if (tong_diem >= Float.parseFloat(jTextFieldPoint.getText())
                            && Integer.parseInt(jTextFieldStudentID.getText()) == (liststu.get(i).getMaThiSinh())) {
                        tableModel.setRowCount(0);
                        showResult(tableModel.getRowCount(), liststu.get(i));
                        checkStudent = true;
                        checkTotal = true;
                        checkNameOfStudent = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo tên tỉnh và điểm chuẩn và tên thí sinh
        else if (jTextFieldStudentID.getText().length() == 0) {
            try {
                tableModel.setRowCount(0);
                for (int i = 0; i < list.size(); i++) {
                    for (int j = 0; j < liststu.size(); j++) {
                        float tong_diem = liststu.get(j).getDiemToan() + liststu.get(j).getDiemLy() + liststu.get(j).getDiemHoa();
                        if (list.get(i).getMaTinh() == liststu.get(j).getMaQueQuan() && tong_diem >= Float.parseFloat(jTextFieldPoint.getText())) {
                            showResult(tableModel.getRowCount(), liststu.get(i));
                            checkCity = true;
                            checkTotal = true;
                            checkNameOfStudent = true;
                        }
                    }
                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo tên tỉnh và mã thí sinh và tên thí sinh
        else if (jTextFieldPoint.getText().length() == 0) {
            try {
                for (int i = 0; i < list.size(); i++) {
                    for (int j = 0; j < liststu.size(); j++) {
                        if (list.get(i).getMaTinh() == liststu.get(j).getMaQueQuan()
                                && Integer.parseInt(jTextFieldStudentID.getText()) == (liststu.get(j).getMaThiSinh())) {
                            tableModel.setRowCount(0);
                            showResult(tableModel.getRowCount(), liststu.get(j));
                            checkStudent = true;
                            checkCity = true;
                            checkNameOfStudent = true;
                            break;
                        }
                    }

                }
            } catch (Exception e) {
            }
        } //tìm kiếm theo tên tỉnh và mã thí sinh và điểm chuẩn và tên thí sinh
        else {
            try {
                for (int i = 0; i < list.size(); i++) {
                    for (int j = 0; j < liststu.size(); j++) {
                        float tong_diem = liststu.get(i).getDiemToan() + liststu.get(i).getDiemLy() + liststu.get(i).getDiemHoa();
                        if (list.get(i).getMaTinh() == liststu.get(j).getMaQueQuan()
                                && Integer.parseInt(jTextFieldStudentID.getText()) == (liststu.get(j).getMaThiSinh())
                                && tong_diem >= Float.parseFloat(jTextFieldPoint.getText())) {
                            tableModel.setRowCount(0);
                            showResult(tableModel.getRowCount(), liststu.get(j));
                            checkStudent = true;
                            checkCity = true;
                            checkTotal = true;
                            checkNameOfStudent = true;
                            break;
                        }
                    }
                }
            } catch (Exception e) {
            }
        }
        if (checkStudent == false && checkCity == false && checkTotal == false && checkNameOfStudent == false) {
            JOptionPane.showMessageDialog(rootPane, "STUDENT DOES NOT EXIST!");
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertActionPerformed
        // TODO add your handling code here:  
        tableModel.setRowCount(0);
        for (int i = 0; i < listStudent.size(); i++) {
            showResult(i, listStudent.get(i));
        }
        //cài đặt mã thí sinh
        setIDStudent();

        //kiểm tra danh sách tỉnh thành
        if (listCity.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "INSERT FALSE! LIST CITY IS EMPTY");
        } else {
            //thêm thí sinh khi thông tin đúng theo yêu cầu 
            if (checkPoint() == true && checkName() == true && checkDate() == true) {
                jTextFieldID.setText(MaTS + "");
                ThiSinh thiSinh = new ThiSinh();
                setStudent(thiSinh);
                TinhTongDiem();
                listStudent.add(thiSinh);       //thêm vào danh sách thí sinh       
                showResult(listStudent.size() - 1, thiSinh);       //hiện thí sinh ra table
                new ThiSinhSQL().addThiSinh(thiSinh);   //thêm thí sinh vào database
                jTextFieldID.setText(MaTS + 1 + "");

                JOptionPane.showMessageDialog(rootPane, "INSERT SUCCESS!");
            } else if (checkName() == false) {
                JOptionPane.showMessageDialog(rootPane, "INSERT FALSE! PLEASE ENTER NAME OF STUDENT");
            } else if (checkPoint() == false) {
                JOptionPane.showMessageDialog(rootPane, "INSERT FALSE! ENTER POINT FALSE");
            } else if (checkDate() == false) {
                JOptionPane.showMessageDialog(rootPane, "INSERT FALSE! STUDENT MUST BE OVER 18 YEARS OLD");
            }
        }
    }//GEN-LAST:event_jButtonInsertActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        int index = jTableList_Student.getSelectedRow();    //lấy vị trí đã chọn trong table
        //xóa thí sinh
        if (index >= 0) {
            for (int i = 0; i < listStudent.size(); i++) {
                if (Integer.parseInt(jTextFieldID.getText()) == listStudent.get(i).getMaThiSinh()) {
                    new ThiSinhSQL().DeleteThiSinh(listStudent.get(i));
                    break;
                }
            }
            tableModel.removeRow(index);
            jTextFieldTotal.setText("");
            JOptionPane.showMessageDialog(rootPane, "DELETE SUCCESS!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "DELETE FALSE! ID OF STUDENT DOES NOT EXIST!");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        // TODO add your handling code here:
        int index = jTableList_Student.getSelectedRow();        //lấy vị trí đã chọn trong table        
        //sửa thí sinh khi thông tin đúng yêu cầu
        if (index >= 0 && checkPoint() == true && checkName() == true && checkDate() == true) {
            int id = Integer.parseInt(jTextFieldID.getText());     //lấy mã thí sinh đã chọn
            for (int i = 0; i < listStudent.size(); i++) {
                if (id == listStudent.get(i).getMaThiSinh()) {
                    setStudent(listStudent.get(i));
                    tableModel.removeRow(index);
                    showResult(index, listStudent.get(i));
                    TinhTongDiem();
                    new ThiSinhSQL().UpdateThiSinh(id, listStudent.get(i));
                    break;
                }
            }
            JOptionPane.showMessageDialog(rootPane, "EDIT SUCCESS!");
        } else if (checkName() == false) {
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! PLEASE ENTER NAME OF STUDENT");
        } else if (checkPoint() == false) {
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! ENTER POINT FALSE");
        } else if (checkDate() == false) {
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! STUDENT MUST BE OVER 18 YEARS OLD");
        } else {
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! ID OF STUDENT DOES NOT EXIST!");
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        //xóa hết các trường
        jTextFieldBirthPlace.setText("");
        jTextFieldStudentID.setText("");
        jTextFieldPoint.setText("");
        jTextFieldNameOfStudent.setText("");
        jTextFieldID.setText("");
        jTextFieldName.setText("");
        buttonGroup.clearSelection();
        jTextFieldMath.setText("");
        jTextFieldPhysical.setText("");
        jTextFieldChemistry.setText("");
        jTextFieldTotal.setText("");
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        listStudent = new ThiSinhSQL().getListThiSinh();
        jButtonCancelActionPerformed(evt);
        //cài đặt mã thí sinh        
        setIDStudent();
        jTextFieldID.setText(MaTS + "");

        //hiện lại danh sách thí sinh trong table        
        tableModel.setRowCount(0);
        for (int i = 0; i < listStudent.size(); i++) {
            showResult(i, listStudent.get(i));
        }
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jTableList_StudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableList_StudentMouseClicked
        // TODO add your handling code here:
        //hiện thí sinh đã chọn trong table ra Student Information
        int index = jTableList_Student.getSelectedRow();
        jTextFieldID.setText(tableModel.getValueAt(index, 0).toString());
        jTextFieldName.setText(tableModel.getValueAt(index, 1).toString());
        jComboBoxPlace.setSelectedItem(tableModel.getValueAt(index, 2));
        try {
            jDateChooser.setDate(formatter.parse(tableModel.getValueAt(index, 3).toString()));
        } catch (ParseException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (tableModel.getValueAt(index, 4).toString().equalsIgnoreCase("Nam")) {
            jRadioButtonMale.setSelected(true);
        } else {
            jRadioButtonFemale.setSelected(true);
        }
        jTextFieldMath.setText(tableModel.getValueAt(index, 5).toString());
        jTextFieldPhysical.setText(tableModel.getValueAt(index, 6).toString());
        jTextFieldChemistry.setText(tableModel.getValueAt(index, 7).toString());
        TinhTongDiem();
    }//GEN-LAST:event_jTableList_StudentMouseClicked

    private void jComboBoxPlaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxPlaceMouseClicked
        // TODO add your handling code here:
        comboBoxModel.removeAllElements();  //remove all elements
        //cài đặt tỉnh thành
        setListCity();
    }//GEN-LAST:event_jComboBoxPlaceMouseClicked

    private void jButtonFileCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFileCityActionPerformed
        // TODO add your handling code here:
        SubFormCity formCity = new SubFormCity();
        formCity.setVisible(true);
    }//GEN-LAST:event_jButtonFileCityActionPerformed

    private void jButtonAboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAboutMouseClicked
        // TODO add your handling code here:
        SubFormAbout formAbout = new SubFormAbout();
        formAbout.setVisible(true);
    }//GEN-LAST:event_jButtonAboutMouseClicked

    private void jTableList_StudentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableList_StudentMousePressed
        // TODO add your handling code here:
        //click chuột phải vào table
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());
        if (!source.isRowSelected(row)) {
            source.changeSelection(row, column, false, false);
        }
    }//GEN-LAST:event_jTableList_StudentMousePressed

    private void setStudent(ThiSinh thiSinh) {
        thiSinh.setMaThiSinh(Integer.parseInt(jTextFieldID.getText()));
        thiSinh.setTenThiSinh(jTextFieldName.getText());
        for (int i = 0; i < listCity.size(); i++) {
            if (listCity.get(i).getTenTinh().equalsIgnoreCase(comboBoxModel.getSelectedItem().toString())) {
                thiSinh.setMaQueQuan(listCity.get(i).getMaTinh());
                break;
            }
        }
        if (jRadioButtonMale.isSelected()) {
            thiSinh.setGioiTinh(true);
        } else {
            thiSinh.setGioiTinh(false);
        }
        thiSinh.setDiemToan(Float.parseFloat(jTextFieldMath.getText()));
        thiSinh.setDiemLy(Float.parseFloat(jTextFieldPhysical.getText()));
        thiSinh.setDiemHoa(Float.parseFloat(jTextFieldChemistry.getText()));
        thiSinh.setNgaySinh(formatter.format(jDateChooser.getDate()));
    }

    private int setIDStudent() {
        //cài đặt mã thí sinh
        if (listStudent.size() > 0) {
            MaTS = listStudent.get(listStudent.size() - 1).getMaThiSinh();
            MaTS++;
        } else {
            MaTS = 10000;
        }
        return MaTS;
    }

    private boolean checkPoint() {
        //kiểm tra nhập điểm
        boolean check = true;
        try {
            if ((Float.parseFloat(jTextFieldMath.getText()) < 0 || Float.parseFloat(jTextFieldMath.getText()) > 10)
                    || (Float.parseFloat(jTextFieldPhysical.getText()) < 0 || Float.parseFloat(jTextFieldPhysical.getText()) > 10)
                    || (Float.parseFloat(jTextFieldChemistry.getText()) < 0 || Float.parseFloat(jTextFieldChemistry.getText()) > 10)) {
                check = false;
            }
        } catch (Exception e) {
            check = false;
        }
        return check;
    }

    private boolean checkName() {
        //kiểm tra người dùng có nhập tên thí sinh
        jTextFieldName.setText(jTextFieldName.getText().trim());
        jTextFieldName.setText(jTextFieldName.getText().replaceAll("\\s+", " "));
        if (jTextFieldName.getText().length() == 0) {
            return false;
        } else {
            return true;
        }
    }

    private boolean checkDate() {
        Calendar calendar = Calendar.getInstance();
        Calendar calendar1 = Calendar.getInstance();
        calendar1.setTime(jDateChooser.getDate());

        int tuoi = calendar.get(Calendar.YEAR) - calendar1.get(Calendar.YEAR);;
        if (tuoi >= 18) {
            return true;
        } else {
            return false;
        }
    }

    private void showResult(int row, ThiSinh thiSinh) {
        //hiện thí sinh ra table        
        listCity = new TinhThanhSQL().getListTinhThanh();
        for (int i = 0; i < listCity.size(); i++) {
            if (thiSinh.getMaQueQuan() == listCity.get(i).getMaTinh()) {
                tableModel.insertRow(row, new Object[]{
                    thiSinh.getMaThiSinh(), thiSinh.getTenThiSinh(), listCity.get(i).getTenTinh(),
                    thiSinh.getNgaySinh(), thiSinh.isGioiTinh(), thiSinh.getDiemToan(), thiSinh.getDiemLy(), thiSinh.getDiemHoa()
                });
                break;
            }
        }
    }

    private void TinhTongDiem() {
        //tính tổng điểm toán lý hóa
        float diem_toan = Float.parseFloat(jTextFieldMath.getText());
        float diem_ly = Float.parseFloat(jTextFieldPhysical.getText());
        float diem_hoa = Float.parseFloat(jTextFieldChemistry.getText());
        float total = diem_hoa + diem_toan + diem_ly;
        jTextFieldTotal.setText(Float.toString(total));
    }

    private void setListCity() {
        //cài đặt tỉnh thành
        listCity = new TinhThanhSQL().getListTinhThanh();
        for (int i = 0; i < listCity.size(); i++) {
            comboBoxModel.addElement(listCity.get(i).getTenTinh());
        }
        jComboBoxPlace.setModel(comboBoxModel);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonAbout;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonFileCity;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox<String> jComboBoxPlace;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabelBirthPlace;
    private javax.swing.JLabel jLabelChemistry;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelList_Student;
    private javax.swing.JLabel jLabelMath;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelNameOfStudent;
    private javax.swing.JLabel jLabelPhysical;
    private javax.swing.JLabel jLabelPlace;
    private javax.swing.JLabel jLabelPoint;
    private javax.swing.JLabel jLabelSex;
    private javax.swing.JLabel jLabelStudentID;
    private javax.swing.JLabel jLabelStudent_Filtre;
    private javax.swing.JLabel jLabelStudent_Information;
    private javax.swing.JLabel jLabelTotal;
    private javax.swing.JRadioButton jRadioButtonFemale;
    private javax.swing.JRadioButton jRadioButtonMale;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTable jTableList_Student;
    private javax.swing.JTextField jTextFieldBirthPlace;
    private javax.swing.JTextField jTextFieldChemistry;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldMath;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldNameOfStudent;
    private javax.swing.JTextField jTextFieldPhysical;
    private javax.swing.JTextField jTextFieldPoint;
    private javax.swing.JTextField jTextFieldStudentID;
    private javax.swing.JTextField jTextFieldTotal;
    // End of variables declaration//GEN-END:variables
}
