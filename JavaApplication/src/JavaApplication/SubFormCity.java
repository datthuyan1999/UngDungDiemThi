package JavaApplication;

import KetNoi.ThiSinhSQL;
import KetNoi.TinhThanhSQL;
import ThongTin.ThiSinh;
import ThongTin.TinhThanh;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Van Nam
 */
public class SubFormCity extends javax.swing.JFrame {

    private ArrayList<TinhThanh> listCity = new TinhThanhSQL().getListTinhThanh();
    private DefaultTableModel model;
    private int MaTinh;

    /**
     * Creates new form ListCity
     */
    public SubFormCity() {
        initComponents();
        setLocationRelativeTo(null);    //đặt giao diện ở chính giữa màn hình khi chạy

        //cài đặt table
        String[] colName = {"CityID", "City"};
        model = (DefaultTableModel) jTableListCity.getModel();
        model.setColumnIdentifiers(colName);

        //hiện danh sách tỉnh thành ra table
        for (int i = 0; i < listCity.size(); i++) {
            showResult(listCity.get(i));
        }
        //cài đặt mã tỉnh
        setID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCityFiltre = new javax.swing.JLabel();
        jLabelCityID = new javax.swing.JLabel();
        jTextFieldCityID = new javax.swing.JTextField();
        jLabelNameCity = new javax.swing.JLabel();
        jTextFieldNameCity = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jLabelListCity = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListCity = new javax.swing.JTable();
        jLabelCityInformation = new javax.swing.JLabel();
        jLabelID = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jLabelCity = new javax.swing.JLabel();
        jTextFieldCity = new javax.swing.JTextField();
        jButtonInsert = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonEdit = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Project: City");

        jLabelCityFiltre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCityFiltre.setText("City Filtre");

        jLabelCityID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCityID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCityID.setText("CityID");

        jTextFieldCityID.setToolTipText("Nhập mã tỉnh thành");

        jLabelNameCity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelNameCity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNameCity.setText("NameOfCity");

        jTextFieldNameCity.setToolTipText("Nhập tên tỉnh thành");

        jButtonSearch.setBackground(new java.awt.Color(102, 255, 255));
        jButtonSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelListCity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelListCity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelListCity.setText("List City");

        jTableListCity.setAutoCreateRowSorter(true);
        jTableListCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ){
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }
        });
        jTableListCity.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTableListCity.setAutoscrolls(false);
        jTableListCity.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableListCity.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableListCity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableListCityMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableListCityMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableListCity);

        jLabelCityInformation.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCityInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCityInformation.setText("City Information");

        jLabelID.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelID.setText("CityID");

        jTextFieldID.setEditable(false);
        jTextFieldID.setToolTipText("Mã tỉnh thành");

        jLabelCity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelCity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCity.setText("City");

        jTextFieldCity.setToolTipText("Tên tỉnh thành");

        jButtonInsert.setBackground(new java.awt.Color(153, 255, 153));
        jButtonInsert.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonInsert.setText("Insert");
        jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(255, 51, 51));
        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonEdit.setBackground(new java.awt.Color(255, 255, 102));
        jButtonEdit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonEdit.setText("Edit");
        jButtonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditActionPerformed(evt);
            }
        });

        jButtonCancel.setBackground(new java.awt.Color(51, 51, 255));
        jButtonCancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonRefresh.setBackground(new java.awt.Color(255, 153, 51));
        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelCityID)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldCityID, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelNameCity)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldNameCity, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonSearch))
                            .addComponent(jScrollPane1)
                            .addComponent(jLabelCityInformation)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonInsert)
                                        .addGap(33, 33, 33)
                                        .addComponent(jButtonDelete))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelID)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(jButtonEdit)
                                        .addGap(31, 31, 31)
                                        .addComponent(jButtonCancel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonRefresh))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(99, 99, 99)
                                        .addComponent(jLabelCity, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCityFiltre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelListCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1))))
            .addComponent(jSeparator2)
            .addComponent(jSeparator3)
            .addComponent(jSeparator4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelCityFiltre)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNameCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelCityID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldCityID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelNameCity, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jButtonSearch)))
                .addGap(8, 8, 8)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelListCity)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCityInformation)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelID))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCity)
                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonRefresh)
                    .addComponent(jButtonEdit)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonInsert))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:  
        boolean ktraID = false;     //kiểm tra mã tỉnh có trong danh sách không
        boolean ktraTen = false;    //kiểm tra tên tỉnh có trong danh sách không
        ArrayList<TinhThanh> list = new ArrayList<>();  //chứa danh sách tỉnh thành

        //bỏ khoảng trắng
        jTextFieldNameCity.setText(jTextFieldNameCity.getText().trim());
        jTextFieldNameCity.setText(jTextFieldNameCity.getText().replaceAll("\\s+", " "));
        jTextFieldCityID.setText(jTextFieldCityID.getText().trim());

        String regex = ".*" + jTextFieldNameCity.getText() + ".*";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher;

        //lấy ra tỉnh thành theo tên
        for (int i = 0; i < listCity.size(); i++) {
            if (listCity.get(i).getTenTinh().equalsIgnoreCase(jTextFieldNameCity.getText())) {
                list.add(listCity.get(i));
                break;
            }
        }
        if (list.size() == 0) {
            for (int i = 0; i < listCity.size(); i++) {
                matcher = pattern.matcher(listCity.get(i).getTenTinh());
                if (matcher.find()) {
                    list.add(listCity.get(i));
                }
            }
        }

        //nếu chỉ tìm kiếm theo mã
        if (jTextFieldNameCity.getText().length() == 0) {
            try {
                for (int i = 0; i < listCity.size(); i++) {
                    if (Integer.parseInt(jTextFieldCityID.getText()) == listCity.get(i).getMaTinh()) {
                        model.setRowCount(0);
                        showResult(listCity.get(i));
                        ktraID = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
            if (ktraID == false) {
                JOptionPane.showMessageDialog(rootPane, "ID OF CITY DOES NOT EXIST!");
            }
        } //nếu chỉ tìm kiếm theo tên
        else if (jTextFieldCityID.getText().length() == 0) {
            if (list.size() != 0) {
                model.setRowCount(0);
                ktraTen = true;        //tên có trong danh sách
                for (int i = 0; i < list.size(); i++) {
                    showResult(list.get(i));
                }
            }
            if (ktraTen == false) {
                JOptionPane.showMessageDialog(rootPane, "NAME OF CITY DOES NOT EXIST!");
            }
        } //nếu tìm kiếm theo cả mã và tên
        else if (jTextFieldNameCity.getText().length() != 0 && jTextFieldCityID.getText().length() != 0) {
            try {
                for (int i = 0; i < list.size(); i++) {
                    if (Integer.parseInt(jTextFieldCityID.getText()) == list.get(i).getMaTinh()) {
                        model.setRowCount(0);
                        showResult(list.get(i));
                        ktraID = true;
                        ktraTen = true;
                        break;
                    }
                }
            } catch (Exception e) {
            }
            if (ktraID == false && ktraTen == false) {
                JOptionPane.showMessageDialog(rootPane, "CITY DOES NOT EXIST!");
            }
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        jButtonCancelActionPerformed(evt);
        listCity = new TinhThanhSQL().getListTinhThanh();
        setID();    //cài đặt mã tỉnh

        //xuất danh sách tỉnh thành ra table
        model.setRowCount(0);
        for (int i = 0; i < listCity.size(); i++) {
            showResult(listCity.get(i));
        }
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        jTextFieldCity.setText("");
        jTextFieldCityID.setText("");
        jTextFieldID.setText("");
        jTextFieldNameCity.setText("");
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        //xóa 1 tỉnh thành trong danh sách
        ArrayList<ThiSinh> listStudent = new ThiSinhSQL().getListThiSinh();
        int index = jTableListCity.getSelectedRow();     //lấy địa chỉ tỉnh đã chọn
        boolean check = true;

        if (index >= 0) {
            //kiểm tra có thí sinh nào thuộc tỉnh muốn xóa không
            for (int i = 0; i < listStudent.size(); i++) {
                if (listStudent.get(i).getMaQueQuan() == Integer.parseInt(jTextFieldID.getText())) {
                    check = false;
                    break;
                }
            }
            if (check == true) {
                for (int i = 0; i < listCity.size(); i++) {
                    if (Integer.parseInt(jTextFieldID.getText()) == listCity.get(i).getMaTinh()) {
                        new TinhThanhSQL().DeleteTinhThanh(listCity.get(i));      //xóa khỏi database
                        listCity.remove(i);
                        break;
                    }
                }
                model.removeRow(index);     //xóa khỏi table
                JOptionPane.showMessageDialog(rootPane, "DELETE SUCCESS!");
            } else {
                JOptionPane.showMessageDialog(rootPane, "DELETE FALSE! THE CITY CONTAINS STUDENTS");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "DELETE FALSE! ID OF CITY DOES NOT EXIST!");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
        for (int i = 0; i < listCity.size(); i++) {
            showResult(listCity.get(i));
        }
        //cài đặt mã tỉnh
        setID();

        //thêm tỉnh vào danh sách
        if (KiemTraThongTin() == true) {
            ++MaTinh;
            jTextFieldID.setText(MaTinh + 1 + "");
            TinhThanh tinhThanh = new TinhThanh();
            tinhThanh.setMaTinh(MaTinh);
            tinhThanh.setTenTinh(jTextFieldCity.getText());
            listCity.add(tinhThanh);    // them vao danh sach
            showResult(tinhThanh);
            jTextFieldCity.setText("");
            new TinhThanhSQL().addTinhThanh(tinhThanh);       //thêm tỉnh thành vào database
            JOptionPane.showMessageDialog(rootPane, "INSERT SUCCESS!");
        } else {
            JOptionPane.showMessageDialog(rootPane, "INSERT FALSE! NAME OF CITY NULL OR ALREADY EXIST");
        }
    }//GEN-LAST:event_jButtonInsertActionPerformed

    private void jButtonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditActionPerformed
        // TODO add your handling code here:
        //chỉnh sửa tỉnh thành
        int index = jTableListCity.getSelectedRow();        //lấy địa chỉ tỉnh đã chọn        
        //chỉnh sửa tên tỉnh thành
        if (index >= 0 && KiemTraThongTin() == true) {
            model.setValueAt(jTextFieldID.getText(), index, 0);
            model.setValueAt(jTextFieldCity.getText(), index, 1);
            for (int i = 0; i < listCity.size(); i++) {
                if (listCity.get(i).getMaTinh() == Integer.parseInt(jTextFieldID.getText())) {
                    listCity.get(i).setTenTinh(jTextFieldCity.getText());
                    new TinhThanhSQL().UpdateTinhThanh(Integer.parseInt(jTextFieldID.getText()), listCity.get(i));
                }
            }
            JOptionPane.showMessageDialog(rootPane, "EDIT SUCCESS!");
        } else if (KiemTraThongTin() == false) {
            jTextFieldCity.setText("");
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! NAME OF CITY NULL OR ALREADY EXIST");
        } else {
            jTextFieldCity.setText("");
            JOptionPane.showMessageDialog(rootPane, "EDIT FALSE! ID OF CITY DOES NOT EXIST!");
        }
    }//GEN-LAST:event_jButtonEditActionPerformed

    private void jTableListCityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListCityMouseClicked
        // TODO add your handling code here:
        //lấy thông tin đã chọn trong table
        int index = jTableListCity.getSelectedRow();
        jTextFieldID.setText(model.getValueAt(index, 0).toString());
        jTextFieldCity.setText(model.getValueAt(index, 1).toString());
    }//GEN-LAST:event_jTableListCityMouseClicked

    private void jTableListCityMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableListCityMousePressed
        // TODO add your handling code here:
        //click chuột phải vào table
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        int column = source.columnAtPoint(evt.getPoint());

        if (!source.isRowSelected(row)) {
            source.changeSelection(row, column, false, false);
        }
    }//GEN-LAST:event_jTableListCityMousePressed

    private void setID() {
        //cài đặt mã tỉnh
        if (listCity.size() > 0) {
            MaTinh = listCity.get(listCity.size() - 1).getMaTinh();
        } else {
            MaTinh = 0;
        }
        jTextFieldID.setText(MaTinh + 1 + "");
    }

    private void showResult(TinhThanh tinhThanh) {
        //hiển thị tỉnh thành ra table
        model.addRow(new Object[]{tinhThanh.getMaTinh(), tinhThanh.getTenTinh()});
    }

    private boolean KiemTraThongTin() {
        boolean ktra = true;
        //kiểm tra tên tỉnh có bị trùng không
        jTextFieldCity.setText(jTextFieldCity.getText().trim());
        jTextFieldCity.setText(jTextFieldCity.getText().replaceAll("\\s+", " "));
        for (int i = 0; i < listCity.size(); i++) {
            if (listCity.get(i).getTenTinh().equalsIgnoreCase(jTextFieldCity.getText())) {
                ktra = false;
                break;
            }
        }
        if (jTextFieldCity.getText().equals("")) {
            ktra = false;
        }
        return ktra;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ListCity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ListCity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ListCity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ListCity.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SubFormCity().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonEdit;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelCityFiltre;
    private javax.swing.JLabel jLabelCityID;
    private javax.swing.JLabel jLabelCityInformation;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelListCity;
    private javax.swing.JLabel jLabelNameCity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTableListCity;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldCityID;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNameCity;
    // End of variables declaration//GEN-END:variables
}
